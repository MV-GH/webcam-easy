"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Webcam = /*#__PURE__*/function () {
  function Webcam(e) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "user";
    var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, Webcam);

    this._webcamElement = e, this._webcamElement.width = this._webcamElement.width || 640, this._webcamElement.height = this._webcamElement.height || .75 * this._webcamElement.width, this._facingMode = t, this._webcamList = [], this._streamList = [], this._selectedDeviceId = "", this._canvasElement = s, this._snapSoundElement = i;
  }

  _createClass(Webcam, [{
    key: "getVideoInputs",
    value: function getVideoInputs(e) {
      var _this = this;

      return this._webcamList = [], e.forEach(function (e) {
        "videoinput" === e.kind && _this._webcamList.push(e);
      }), 1 == this._webcamList.length && (this._facingMode = "user"), this._webcamList;
    }
  }, {
    key: "getMediaConstraints",
    value: function getMediaConstraints() {
      var e = {};
      return "" == this._selectedDeviceId ? e.facingMode = this._facingMode : e.deviceId = {
        exact: this._selectedDeviceId
      }, {
        video: e,
        audio: !1
      };
    }
  }, {
    key: "selectCamera",
    value: function selectCamera() {
      var _iterator = _createForOfIteratorHelper(this._webcamList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;

          if ("user" == this._facingMode && e.label.toLowerCase().includes("front") || "enviroment" == this._facingMode && e.label.toLowerCase().includes("back")) {
            this._selectedDeviceId = e.deviceId;
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "flip",
    value: function flip() {
      this._facingMode = "user" == this._facingMode ? "enviroment" : "user", this._webcamElement.style.transform = "", this.selectCamera();
    }
  }, {
    key: "start",
    value: async function start() {
      var _this2 = this;

      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
      return new Promise(function (t, s) {
        _this2.stop(), navigator.mediaDevices.getUserMedia(_this2.getMediaConstraints()).then(function (i) {
          _this2._streamList.push(i), _this2.info().then(function (i) {
            _this2.selectCamera(), e ? _this2.stream().then(function (e) {
              t(_this2._facingMode);
            }).catch(function (e) {
              s(e);
            }) : t(_this2._selectedDeviceId);
          }).catch(function (e) {
            s(e);
          });
        }).catch(function (e) {
          s(e);
        });
      });
    }
  }, {
    key: "info",
    value: async function info() {
      var _this3 = this;

      return new Promise(function (e, t) {
        navigator.mediaDevices.enumerateDevices().then(function (t) {
          _this3.getVideoInputs(t), e(_this3._webcamList);
        }).catch(function (e) {
          t(e);
        });
      });
    }
  }, {
    key: "stream",
    value: async function stream() {
      var _this4 = this;

      return new Promise(function (e, t) {
        navigator.mediaDevices.getUserMedia(_this4.getMediaConstraints()).then(function (t) {
          _this4._streamList.push(t), _this4._webcamElement.srcObject = t, "user" == _this4._facingMode && (_this4._webcamElement.style.transform = "scale(-1,1)"), _this4._webcamElement.play(), e(_this4._facingMode);
        }).catch(function (e) {
          console.log(e), t(e);
        });
      });
    }
  }, {
    key: "stop",
    value: function stop() {
      this._streamList.forEach(function (e) {
        e.getTracks().forEach(function (e) {
          e.stop();
        });
      });
    }
  }, {
    key: "snap",
    value: function snap() {
      if (null != this._canvasElement) {
        null != this._snapSoundElement && this._snapSoundElement.play(), this._canvasElement.height = this._webcamElement.scrollHeight, this._canvasElement.width = this._webcamElement.scrollWidth;

        var e = this._canvasElement.getContext("2d");

        return "user" == this._facingMode && (e.translate(this._canvasElement.width, 0), e.scale(-1, 1)), e.clearRect(0, 0, this._canvasElement.width, this._canvasElement.height), e.drawImage(this._webcamElement, 0, 0, this._canvasElement.width, this._canvasElement.height), this._canvasElement.toDataURL("image/png");
      }

      throw "canvas element is missing";
    }
  }, {
    key: "facingMode",
    get: function get() {
      return this._facingMode;
    },
    set: function set(e) {
      this._facingMode = e;
    }
  }, {
    key: "webcamList",
    get: function get() {
      return this._webcamList;
    }
  }, {
    key: "webcamCount",
    get: function get() {
      return this._webcamList.length;
    }
  }, {
    key: "selectedDeviceId",
    get: function get() {
      return this._selectedDeviceId;
    }
  }]);

  return Webcam;
}();
